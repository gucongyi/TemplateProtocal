using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Protocal
{

    public class ProxyDic
    {
        public static Dictionary<Type, Type> dicProto = new Dictionary<Type, Type>();
        public static List<Type> listProto = new List<Type>();
        static ProxyDic()
        { {% for key,data in datas.items() %}{% if data.resp %}
            AddIfNotContains(typeof({{ data.name }}), typeof({{ data.resp }}));{% elif data.type == 'notice' %}
            listProto.Add(typeof({{ data.name }}));{% endif %}{% endfor %}
        }

        private static void AddIfNotContains(Type typeTos, Type typeToc)
        {
            if (!dicProto.ContainsKey(typeTos))
            {
                dicProto.Add(typeTos, typeToc);
            }
        }

        public static Type GetTocByTypeTos(Type typeTos)
        {
            Type typeToc = null;
            if (dicProto.TryGetValue((typeTos), out typeToc))
            {
                return typeToc;
            }
            return null;
        }

        public static string GetTocNameByTypeTos(Type typeTos)
        {
            Type typeToc = null;
            if (dicProto.TryGetValue((typeTos), out typeToc))
            {

            }

            if (typeToc != null)
            {
                return typeToc.Name;
            }
            else
            {
                return string.Empty;
            }
        }
    }

    {% for key,data in datas.items() %}{% if data.type == 'CodeError' %}
    public class {{data.name}}
    {
        public static Dictionary<string, string> codeProto = new Dictionary<string, string>();
        
        static {{data.name}}()
        { {% for key,data in datas.items() %}{% if data.type == 'CodeError' %}{% for property in data.properties %}{% if property.des %}
            // {{ property.des }}{% endif %}
            AddIfNotContains("{{ property.value }}", "{{ property.msg }}");{% endfor %}{% endif %}{% endfor %}
        }

        private static void AddIfNotContains(string code, string desc)
        {
            if (!codeProto.ContainsKey(code))
            {
                codeProto.Add(code, desc);
            }
        }

        public static Type GetTocByTypeTos(Type typeTos)
        {
            Type typeToc = null;
            if (dicProto.TryGetValue((typeTos), out typeToc))
            {
                return typeToc;
            }
            return null;
        }

        public static string GetTocNameByTypeTos(Type typeTos)
        {
            Type typeToc = null;
            if (dicProto.TryGetValue((typeTos), out typeToc))
            {

            }

            if (typeToc != null)
            {
                return typeToc.Name;
            }
            else
            {
                return string.Empty;
            }
        }
    }{% endif %}{% endfor %}
}
